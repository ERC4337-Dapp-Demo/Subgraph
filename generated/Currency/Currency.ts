// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewCurrency extends ethereum.Event {
  get params(): NewCurrency__Params {
    return new NewCurrency__Params(this);
  }
}

export class NewCurrency__Params {
  _event: NewCurrency;

  constructor(event: NewCurrency) {
    this._event = event;
  }

  get currency(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get url(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetPermissionCurrency extends ethereum.Event {
  get params(): SetPermissionCurrency__Params {
    return new SetPermissionCurrency__Params(this);
  }
}

export class SetPermissionCurrency__Params {
  _event: SetPermissionCurrency;

  constructor(event: SetPermissionCurrency) {
    this._event = event;
  }

  get currency(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get permission(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Currency extends ethereum.SmartContract {
  static bind(address: Address): Currency {
    return new Currency("Currency", address);
  }

  currencies(param0: BigInt): Address {
    let result = super.call("currencies", "currencies(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_currencies(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("currencies", "currencies(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currencyExists(param0: Address): boolean {
    let result = super.call(
      "currencyExists",
      "currencyExists(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_currencyExists(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "currencyExists",
      "currencyExists(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currencyState(param0: Address): boolean {
    let result = super.call("currencyState", "currencyState(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_currencyState(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "currencyState",
      "currencyState(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getLengthCurrencies(): BigInt {
    let result = super.call(
      "getLengthCurrencies",
      "getLengthCurrencies():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLengthCurrencies(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLengthCurrencies",
      "getLengthCurrencies():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCurrencyCall extends ethereum.Call {
  get inputs(): AddCurrencyCall__Inputs {
    return new AddCurrencyCall__Inputs(this);
  }

  get outputs(): AddCurrencyCall__Outputs {
    return new AddCurrencyCall__Outputs(this);
  }
}

export class AddCurrencyCall__Inputs {
  _call: AddCurrencyCall;

  constructor(call: AddCurrencyCall) {
    this._call = call;
  }

  get _contractERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _imgUrl(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddCurrencyCall__Outputs {
  _call: AddCurrencyCall;

  constructor(call: AddCurrencyCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCurrencyCall extends ethereum.Call {
  get inputs(): SetCurrencyCall__Inputs {
    return new SetCurrencyCall__Inputs(this);
  }

  get outputs(): SetCurrencyCall__Outputs {
    return new SetCurrencyCall__Outputs(this);
  }
}

export class SetCurrencyCall__Inputs {
  _call: SetCurrencyCall;

  constructor(call: SetCurrencyCall) {
    this._call = call;
  }

  get _contractERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _permission(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetCurrencyCall__Outputs {
  _call: SetCurrencyCall;

  constructor(call: SetCurrencyCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
